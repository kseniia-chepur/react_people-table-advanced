{"version":3,"sources":["components/Navbar.tsx","App.tsx","components/HomePage.tsx","utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/PersonLink.tsx","components/PeopleTable.tsx","api.ts","types/SortParams.ts","components/PeoplePage.tsx","services/filterPeople.ts","components/NotFoundPage.tsx","index.tsx"],"names":["getLinkClass","isActive","cn","Navbar","className","role","to","App","HomePage","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","search","centuries","PeopleFilters","setSearchParams","query","get","sex","centuryParams","getAll","type","placeholder","onChange","e","target","map","century","includes","filter","item","Loader","PersonLink","person","slug","name","sortTypes","PeopleTable","people","useParams","sort","order","getSortParams","sortType","getParentInfo","parentName","parent","find","born","died","motherName","fatherName","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","SortParams","PeoplePage","useState","setPeople","isLoading","setIsLoading","hasError","setHasError","filteredPeople","length","Math","ceil","normalizedQuery","toLowerCase","a","b","NAME","SEX","localeCompare","BORN","DIED","reverse","filterPeople","useEffect","getPeople","peopleData","catch","finally","NotFoundPage","createRoot","document","getElementById","render","path","element","index","replace"],"mappings":"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","file":"static/js/main.e1acabaf.chunk.js","sourcesContent":["import cn from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nconst getLinkClass = ({ isActive }: { isActive: boolean }) => cn(\n  'navbar-item',\n  { 'has-background-grey-lighter': isActive },\n);\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={getLinkClass}\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            className={getLinkClass}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport { Navbar } from './components/Navbar';\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </div>\n    </div>\n  );\n};\n","export const HomePage: React.FC = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import cn from 'classnames';\nimport { useSearchParams } from 'react-router-dom';\nimport { SearchLink } from './SearchLink';\nimport { getSearchWith } from '../utils/searchHelper';\n\nconst centuries = ['16', '17', '18', '19', '20'];\n\nexport const PeopleFilters: React.FC = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') || '';\n  const sex = searchParams.get('sex') || null;\n  const centuryParams = searchParams.getAll('centuries') || [];\n\n  const handleSearchInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const search = getSearchWith(searchParams, { query: e.target.value });\n\n    setSearchParams(search);\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          params={{ sex: null }}\n          className={cn({ 'is-active': !sex })}\n        >\n          All\n        </SearchLink>\n        <SearchLink\n          params={{ sex: 'm' }}\n          className={cn({ 'is-active': sex === 'm' })}\n        >\n          Male\n        </SearchLink>\n        <SearchLink\n          params={{ sex: 'f' }}\n          className={cn({ 'is-active': sex === 'f' })}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleSearchInput}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {centuries.map(century => (\n              <SearchLink\n                key={century}\n                data-cy=\"century\"\n                className={cn(\n                  'button mr-1', { 'is-info': centuryParams.includes(century) },\n                )}\n                params={{\n                  centuries: centuryParams.includes(century)\n                    ? centuryParams.filter(item => item !== century)\n                    : [...centuryParams, century],\n                }}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className=\"button is-success is-outlined\"\n              params={{ centuries: null }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{ query: null, sex: null, centuries: null }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import cn from 'classnames';\nimport { Link } from 'react-router-dom';\nimport { Person } from '../types';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  return (\n    <Link\n      to={`/people/${person.slug}`}\n      className={cn({ 'has-text-danger': person.sex === 'f' })}\n    >\n      {person.name}\n    </Link>\n  );\n};\n","import cn from 'classnames';\nimport {\n  useParams,\n  useSearchParams,\n} from 'react-router-dom';\nimport { Person } from '../types';\nimport { PersonLink } from './PersonLink';\nimport { SearchLink } from './SearchLink';\n\ntype Props = {\n  people: Person[];\n};\n\nconst sortTypes = ['Name', 'Sex', 'Born', 'Died'];\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const { slug } = useParams();\n\n  const [searchParams] = useSearchParams();\n  const sort = searchParams.get('sort');\n  const order = searchParams.get('order');\n\n  const getSortParams = (sortType: string) => {\n    if (sort !== sortType) {\n      return { sort: sortType, order: null };\n    }\n\n    if (sort === sortType && !order) {\n      return { sort: sortType, order: 'desc' };\n    }\n\n    return { sort: null, order: null };\n  };\n\n  const getParentInfo = (parentName: string) => {\n    const parent = people.find(person => person.name === parentName);\n\n    if (parent) {\n      return (\n        <PersonLink person={parent} />\n      );\n    }\n\n    return parentName;\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {sortTypes.map(sortType => (\n            <th key={sortType}>\n              <span className=\"is-flex is-flex-wrap-nowrap\">\n                {sortType}\n                <SearchLink params={getSortParams(sortType)}>\n                  <span className=\"icon\">\n                    <i className={cn('fas fa-sort',\n                      { 'fa-sort-up': sort === sortType && !order },\n                      { 'fa-sort-down': sort === sortType && order })}\n                    />\n                  </span>\n                </SearchLink>\n              </span>\n            </th>\n          ))}\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => (\n          <tr\n            data-cy=\"person\"\n            key={person.slug}\n            className={cn({\n              'has-background-warning': person.slug === slug,\n            })}\n          >\n            <td>\n              <PersonLink person={person} />\n            </td>\n            <td>{person.sex}</td>\n            <td>{person.born}</td>\n            <td>{person.died}</td>\n            <td>\n              {person.motherName\n                ? getParentInfo(person.motherName)\n                : '-'}\n            </td>\n            <td>\n              {person.fatherName\n                ? getParentInfo(person.fatherName)\n                : '-'}\n            </td>\n          </tr>\n        ))}\n\n      </tbody>\n    </table>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","export enum SortParams {\n  NAME = 'name',\n  SEX = 'sex',\n  BORN = 'born',\n  DIED = 'died',\n}\n","import {\n  useEffect,\n  useState,\n} from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { PeopleFilters } from './PeopleFilters';\nimport { Loader } from './Loader';\nimport { PeopleTable } from './PeopleTable';\nimport { Person } from '../types';\nimport { getPeople } from '../api';\nimport { filterPeople } from '../services/filterPeople';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [searchParams] = useSearchParams();\n  const query = searchParams.get('query') || '';\n  const sex = searchParams.get('sex') || null;\n  const centuryParams = searchParams.getAll('centuries') || [];\n  const sort = searchParams.get('sort');\n  const order = searchParams.get('order');\n\n  const filteredPeople = filterPeople(\n    people,\n    query,\n    sex,\n    centuryParams,\n    sort,\n    order,\n  );\n\n  useEffect(() => {\n    setIsLoading(true);\n    setHasError(false);\n\n    getPeople()\n      .then(peopleData => setPeople(peopleData))\n      .catch(() => setHasError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n\n          {!isLoading && !hasError && !!people.length\n          && (\n            <div className=\"column is-7-tablet is-narrow-desktop\">\n              <PeopleFilters />\n            </div>\n          )}\n\n          <div className=\"column\">\n\n            {isLoading && <Loader />}\n\n            {hasError && (\n              <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                Something went wrong\n              </p>\n            )}\n\n            {!isLoading && !hasError && !people.length && (\n              <p data-cy=\"noPeopleMessage\">\n                There are no people on the server\n              </p>\n            )}\n\n            {!!people.length && !filteredPeople.length\n              && (\n                <p>\n                  There are no people matching the current search criteria\n                </p>\n              )}\n\n            {!!people.length && !!filteredPeople.length && (\n\n              <PeopleTable people={filteredPeople} />\n\n            )}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { Person } from '../types';\nimport { SortParams } from '../types/SortParams';\n\nexport const filterPeople = (\n  people: Person[],\n  query: string,\n  sex: string | null,\n  centuries: string[],\n  sort: string | null,\n  order: string | null,\n) => {\n  let filteredPeople = [...people];\n\n  if (sex) {\n    filteredPeople = filteredPeople.filter(person => person.sex === sex);\n  }\n\n  if (centuries.length) {\n    filteredPeople = filteredPeople.filter(person => centuries\n      .includes(Math.ceil(person.born / 100).toString()));\n  }\n\n  if (query) {\n    const normalizedQuery = query.toLowerCase();\n\n    filteredPeople\n        = filteredPeople.filter(person => person.name.toLowerCase()\n        .includes(query))\n        || filteredPeople.filter(person => person.motherName?.toLowerCase()\n          .includes(normalizedQuery))\n        || filteredPeople.filter(person => person.fatherName?.toLowerCase()\n          .includes(normalizedQuery));\n  }\n\n  if (sort) {\n    filteredPeople.sort((a, b) => {\n      switch (sort) {\n        case SortParams.NAME:\n        case SortParams.SEX:\n          return a[sort].localeCompare(b[sort]);\n        case SortParams.BORN:\n        case SortParams.DIED:\n          return a[sort] - b[sort];\n        default: return 0;\n      }\n    });\n  }\n\n  if (order) {\n    return filteredPeople.reverse();\n  }\n\n  return filteredPeople;\n};\n","export const NotFoundPage: React.FC = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","import { createRoot } from 'react-dom/client';\nimport {\n  HashRouter as Router,\n  Routes,\n  Route,\n  Navigate,\n} from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\nimport { HomePage } from './components/HomePage';\nimport { PeoplePage } from './components/PeoplePage';\nimport { NotFoundPage } from './components/NotFoundPage';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<App />}>\n          <Route index element={<HomePage />} />\n          <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n          <Route path=\"people\" element={<PeoplePage />}>\n            <Route path=\":slug?\" element={<PeoplePage />} />\n          </Route>\n          <Route path=\"*\" element={<NotFoundPage />} />\n        </Route>\n      </Routes>\n    </Router>,\n  );\n"],"sourceRoot":""}